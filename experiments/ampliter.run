option solver "/home/marika/software/AMPL/cplex";	# path to used solver (cplex)
#option cplex_options 'mipdisplay 2 mipinterval 1';	# what should be displayed during solution process
option eexit -99999; 					# supress bailing after xxx warnings
#option log_file "logs/logfile.txt";			# log console output

set FILENAMES;
set backupS; 	# pseudo sources used in the matching ub
param lb;	# lower bound
param ub;	# upper bound
param v1;	
param v2;
param s1;

param tlim default 3600;	# time limit for the solver
param doILP default 0;		# indicates whether the ILP models should be solved
param doMATCHING default 0;	# indicates whether the matching upper bound should be solved;
param iterCnt default 0;	# number of iteration in matching ub algorithm
param mTime default 0;		# time spent by matching algorithm
param currTlim default 3600;	# cummulate _solve_elapsed_time for each iteration of decision model

param objlog symbolic := "./logs/objlog.txt";	# objective function value log file
param timelog symbolic := "./logs/timelog.txt"; # _solve_elapsed_time log file
param matchlog symbolic := "./logs/matchlog.txt"; # _solve_elapsed_time log file


data "filenames.dat";	# names of files in folder ./data

model "models/MBT-combined.mod";

printf 's\t',ctime() >> (objlog);
printf 's\t',ctime() >> (timelog);

if doILP then {
	printf 'LP(maxInformed)\t maxInformed\t  minTime\t' >> (objlog); 
	printf 'LP(maxInformed)\t maxInformed\t  minTime\t' >> (timelog); 
}

if doMATCHING then {
	printf 'match(4)\t  match(3)\t  match(2)\t  match(1)\n' >> (objlog); 
	printf 'match(4)\t  match(3)\t  match(2)\t  match(1)\n' >> (timelog); 
}

for{fname in FILENAMES} {
	printf 'filename: %s\n', fname; 
	printf '========================\n';
        printf '%s\t', fname >> (objlog);
        printf '%s\t', fname >> (timelog);

	# startof loading data --------------------------------------
	#reset data;
	let E := {};
	let S := {};
	read cardV, cardE, cardS < (fname);
	for{k in 1..cardE} {
		read v1,v2 < (fname);  	# read an edge from a textfile
		let E := E union {(min(v1,v2),max(v1,v2))};
	}
	for {k in 1..cardS} {
		read s1 < (fname); 	# read a source node id from a textfile
		let S := S union {s1};
	}
	read lb, ub < (fname);		#read lower and upper bounds


	let backupS := S;
	# end of loading data --------------------------------------

	# start of upper bound calculation  ------------------------
	drop xcrel;
#	drop timing;
	drop allReceive;
	#restore oneAtATime;
	objective maxCardM;
	if doMATCHING = 1 then {					 			# perform this procedure only if it is desired
		for {h in {4,3,2,1}} {								# for deadline 4, 3, 2, and 1 (upper bound is weaker with shorter deadline)
        	        option relax_integrality 0;						# relaxation of integrality 0 - solve IP. 1 - solve IP relaxation
			let currTlim := tlim;
			let tmax := h;	
			let iterCnt := 0;
			let S := backupS;
		        repeat while card(S) < cardV {						# in iterative matching cardinality of 'sources' is increasing
		       		let iterCnt := iterCnt + 1;
		#####		option cplex_options ('timelimit ' & currTlim);			# set time limit for the following solve command
				display E;
				display S;
		                solve;
				let currTlim := currTlim - _solve_time;;
		                for {j in S} {							# add neighbours of the sources to the sources for the next iteration
		                	for {v in N[j]} {
        	                                if x[j,v,1] == 1 then let S := S union {v};
        	                        }
        	                }
        	        }
			printf  "\t %f",tlim - currTlim > (matchlog);	# log time for computing the upper bound. Is temporarily in separate file because it is logged at the end of the line in log file
			printf  "\t %d", iterCnt > (matchlog);		# log time for computing the upper bound.
		}
	}
	# end of upper bound calculation ------------------------

 	let S := backupS;
	restore allReceive;
	objective maxInformed;
	if doILP = 1 then { 						# perform this procedure ofnly if it is desired
		for {j in 0..1} {					# this model is once solved as a lp relaxation (for finding lower bound) and then as an ip
			printf '------------------------\n';
			printf 'model: max informed, integrality relaxed: %d\n', (if j=0 then 1 else 0);
			printf '------------------------\n';
			let currTlim := time();
			for {i in lb..ub} {						# iterate from lower to upper bound
			        let tmax := i;
				option relax_integrality (if j= 0 then 1 else 0);	# set if ip or lp
				option cplex_options ('absmipgap 0.99999  timelimit ' & currTlim);		# set time limit for the following solve command
				#option cplex_options ('absmipgap 0 lowercutoff ' & j);
			        solve;
				
				let currTlim := currTlim - _solve_time;
				printf "remaining time: ";
				#option show_stats 1; 
				
			        if solve_result = 'solved' then { 	# a solution is found
					# if a solution is found, but objective is not n-s, then the solution is in fact infeasible!
					if round(maxInformed,2) = cardV-cardS then {
						#printf '%4.2f\t', tlim - currTlim >> (timelog);
						printf '%4.2f\t', time() - currTlim >> (timelog);
						printf '%2.0f\t', i >> (objlog);
			        	        printf 'optimal solution found, n-s nodes informed. broadcast time: %d\n',i;
			        	        break;
					}
			        }
				if solve_result = 'infeasible' then {	# the instance has no feasible solution
						if i = ub-1 then {		# if we are in the last iteration before the upper bound, the solution is indeed the ub.
							printf '%4.2f\t',  tlim - currTlim  >> (timelog);
						printf '%2.0f\t', ub >> (objlog);
						printf 'infeasible solution for iteration %d, but upper bound %d can now be used',i,ub;
			                	break;
					}
					else {
			        		printf 'infeasible for deadline k = %d\n',i;
					}
				}
				# if we got here, it means that we exceeded the time limit without finding the solution
				 if solve_result = 'limit' or currTlim < 0 then {
					printf '%4.2f\t',  tlim - currTlim  >> (timelog);
					printf '%2.0f\t', i >> (objlog);
			                printf 'time limit exceeded. best value found (lb): %d\n',i;
			                break;
			        }
			}
		}
 		printf '------------------------\n';
		printf 'model: min time\n';
		printf '------------------------\n';
		#drop oneAtATime;
		restore xcrel;
		#restore timing;
		objective minTime;
		option cplex_options ('timelimit ' & tlim);		# set time limit for the following solve command
		solve;
        	printf '%d\t',ceil(minTime) >> (objlog);
        	printf '%4.2f\t', _solve_time  >> (timelog);
	}
	if doMATCHING = 1 then { 		# log matching time and cost only if it was actually performed
		for {h in {4,3,2,1}} { 		# write logs for matching ub
			read mTime < (matchlog);
			read iterCnt < (matchlog);
			printf '%4.1f\t', mTime >> (timelog);
			printf '%d\t',iterCnt >> (objlog);
		}
	}
        display solve_result;
        option show_stats 1; 
	
	printf '\n' >> (timelog);
	printf '\n' >> (objlog);
}
	

